{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      user: {\n        id: '',\n        // Added user ID\n        nama: '',\n        email: '',\n        roles: '',\n        no_telp: ''\n      },\n      notification: {\n        message: '',\n        type: '' // 'success' or 'error'\n      },\n      errors: {\n        nama: '',\n        email: '',\n        no_telp: ''\n      }\n    };\n  },\n  created() {\n    const userId = this.$route.params.id; // Get user ID from URL\n    this.getUserData(userId); // Fetch user data based on ID\n  },\n  methods: {\n    async getUserData(userId) {\n      try {\n        const response = await axios.get(`http://127.0.0.1:5000/get-user/${userId}`);\n        this.user = response.data; // Populate the form with fetched user data\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    },\n    async submitForm() {\n      // Reset errors\n      this.errors = {};\n\n      // Validate form\n      if (!this.user.nama) {\n        this.errors.nama = 'Nama tidak boleh kosong';\n      }\n      if (!this.user.email) {\n        this.errors.email = 'Email tidak boleh kosong';\n      } else if (!this.isValidEmail(this.user.email)) {\n        this.errors.email = 'Format email tidak valid';\n      } else if (await this.isEmailExist(this.user.email)) {\n        this.errors.email = 'Email sudah terdaftar';\n      }\n      if (!this.user.no_telp) {\n        this.errors.no_telp = 'Nomor telepon tidak boleh kosong';\n      }\n\n      // If there are errors, don't submit the form\n      if (Object.keys(this.errors).length > 0) {\n        return;\n      }\n\n      // Send data to the server to update the user\n      axios.put(`http://127.0.0.1:5000/update-user/${this.user.id}`, this.user).then(response => {\n        // Show success notification\n        this.notification.message = 'Data User berhasil diperbarui!';\n        this.notification.type = 'success';\n\n        // Optionally, reset the form or redirect\n        // this.user = { nama: '', email: '', roles: '', no_telp: '' };\n        this.$router.push('/list-users'); // Redirect to the list of users\n      }).catch(error => {\n        // Show error notification\n        this.notification.message = 'Data gagal diperbarui!';\n        this.notification.type = 'error';\n        console.error(error);\n      });\n    },\n    // Check email format validity\n    isValidEmail(email) {\n      const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n      return regex.test(email);\n    },\n    // Check if email already exists\n    async isEmailExist(email) {\n      try {\n        const response = await axios.get(`http://127.0.0.1:5000/check-email?email=${email}`);\n        return response.data.exists;\n      } catch (error) {\n        console.error('Error checking email:', error);\n        return false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","user","id","nama","email","roles","no_telp","notification","message","type","errors","created","userId","$route","params","getUserData","methods","response","get","error","console","submitForm","isValidEmail","isEmailExist","Object","keys","length","put","then","$router","push","catch","regex","test","exists"],"sources":["D:\\SEMESTER 5\\Proyek\\Web_Kost\\frontend\\src\\views\\EditUser.vue"],"sourcesContent":["<template>\r\n    <div class=\"content\">\r\n      <div class=\"col-md-8\">\r\n        <div class=\"card card-user\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"card-title\">Edit User</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <!-- Notifikasi -->\r\n            <div v-if=\"notification.message\" :class=\"['notification', notification.type]\">\r\n              {{ notification.message }}\r\n            </div>\r\n  \r\n            <form @submit.prevent=\"submitForm\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                  <div class=\"form-group\">\r\n                    <label>Nama</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      placeholder=\"Nama\" \r\n                      v-model=\"user.nama\"\r\n                      :class=\"{'is-invalid': errors.nama}\"\r\n                      required\r\n                    />\r\n                    <div v-if=\"errors.nama\" class=\"invalid-feedback\">{{ errors.nama }}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                  <div class=\"form-group\">\r\n                    <label>Email</label>\r\n                    <input \r\n                      type=\"email\" \r\n                      class=\"form-control\" \r\n                      placeholder=\"Email\" \r\n                      v-model=\"user.email\"\r\n                      :class=\"{'is-invalid': errors.email}\"\r\n                      required\r\n                    />\r\n                    <div v-if=\"errors.email\" class=\"invalid-feedback\">{{ errors.email }}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                  <div class=\"form-group\">\r\n                    <label>Roles</label>\r\n                    <select class=\"form-control\" v-model=\"user.roles\" required>\r\n                      <option value=\"admin\">Admin</option>\r\n                      <option value=\"penyewa\">Penyewa</option>\r\n                      <option value=\"pemilik\">Pemilik</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                  <div class=\"form-group\">\r\n                    <label>Phone</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      placeholder=\"Phone\" \r\n                      v-model=\"user.no_telp\"\r\n                      :class=\"{'is-invalid': errors.no_telp}\"\r\n                      required\r\n                    />\r\n                    <div v-if=\"errors.no_telp\" class=\"invalid-feedback\">{{ errors.no_telp }}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"update ml-auto mr-auto\">\r\n                  <button type=\"submit\" class=\"btn btn-update-profile btn-round\">Edit User</button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        user: {\r\n          id: '', // Added user ID\r\n          nama: '',\r\n          email: '',\r\n          roles: '',\r\n          no_telp: ''\r\n        },\r\n        notification: {\r\n          message: '',\r\n          type: '' // 'success' or 'error'\r\n        },\r\n        errors: {\r\n          nama: '',\r\n          email: '',\r\n          no_telp: ''\r\n        }\r\n      };\r\n    },\r\n    created() {\r\n      const userId = this.$route.params.id; // Get user ID from URL\r\n      this.getUserData(userId); // Fetch user data based on ID\r\n    },\r\n    methods: {\r\n      async getUserData(userId) {\r\n        try {\r\n          const response = await axios.get(`http://127.0.0.1:5000/get-user/${userId}`);\r\n          this.user = response.data; // Populate the form with fetched user data\r\n        } catch (error) {\r\n          console.error('Error fetching user data:', error);\r\n        }\r\n      },\r\n      async submitForm() {\r\n        // Reset errors\r\n        this.errors = {};\r\n  \r\n        // Validate form\r\n        if (!this.user.nama) {\r\n          this.errors.nama = 'Nama tidak boleh kosong';\r\n        }\r\n        if (!this.user.email) {\r\n          this.errors.email = 'Email tidak boleh kosong';\r\n        } else if (!this.isValidEmail(this.user.email)) {\r\n          this.errors.email = 'Format email tidak valid';\r\n        } else if (await this.isEmailExist(this.user.email)) {\r\n          this.errors.email = 'Email sudah terdaftar';\r\n        }\r\n        if (!this.user.no_telp) {\r\n          this.errors.no_telp = 'Nomor telepon tidak boleh kosong';\r\n        }\r\n  \r\n        // If there are errors, don't submit the form\r\n        if (Object.keys(this.errors).length > 0) {\r\n          return;\r\n        }\r\n  \r\n        // Send data to the server to update the user\r\n        axios.put(`http://127.0.0.1:5000/update-user/${this.user.id}`, this.user)\r\n          .then(response => {\r\n            // Show success notification\r\n            this.notification.message = 'Data User berhasil diperbarui!';\r\n            this.notification.type = 'success';\r\n  \r\n            // Optionally, reset the form or redirect\r\n            // this.user = { nama: '', email: '', roles: '', no_telp: '' };\r\n            this.$router.push('/list-users'); // Redirect to the list of users\r\n          })\r\n          .catch(error => {\r\n            // Show error notification\r\n            this.notification.message = 'Data gagal diperbarui!';\r\n            this.notification.type = 'error';\r\n            console.error(error);\r\n          });\r\n      },\r\n  \r\n      // Check email format validity\r\n      isValidEmail(email) {\r\n        const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\r\n        return regex.test(email);\r\n      },\r\n  \r\n      // Check if email already exists\r\n      async isEmailExist(email) {\r\n        try {\r\n          const response = await axios.get(`http://127.0.0.1:5000/check-email?email=${email}`);\r\n          return response.data.exists;\r\n        } catch (error) {\r\n          console.error('Error checking email:', error);\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .btn-update-profile {\r\n    background-color: #75276d;\r\n    color: white;\r\n    border-color: #75276d;\r\n  }\r\n  \r\n  .btn-update-profile:hover {\r\n    background-color: #5e1d57;\r\n    border-color: #5e1d57;\r\n  }\r\n  \r\n  /* CSS for notifications */\r\n  .notification {\r\n    padding: 10px;\r\n    margin-bottom: 20px;\r\n    border-radius: 5px;\r\n    font-weight: bold;\r\n    text-align: center;\r\n  }\r\n  \r\n  .notification.success {\r\n    background-color: #28a745; /* Green */\r\n    color: white;\r\n  }\r\n  \r\n  .notification.error {\r\n    background-color: #dc3545; /* Red */\r\n    color: white;\r\n  }\r\n  \r\n  /* Styling for invalid input fields */\r\n  .is-invalid {\r\n    border-color: #dc3545;\r\n  }\r\n  \r\n  .invalid-feedback {\r\n    color: #dc3545;\r\n    font-size: 0.875em;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}