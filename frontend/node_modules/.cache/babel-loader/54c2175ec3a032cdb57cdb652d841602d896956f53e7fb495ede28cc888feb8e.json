{"ast":null,"code":"import axios from 'axios'; // Import axios\n\nexport default {\n  data() {\n    return {\n      user: {\n        nama: '',\n        email: '',\n        roles: '',\n        no_telp: ''\n      },\n      notification: {\n        message: '',\n        type: '' // 'success' or 'error'\n      },\n      errors: {\n        nama: '',\n        email: '',\n        no_telp: ''\n      }\n    };\n  },\n  methods: {\n    async submitForm() {\n      // Reset errors\n      this.errors = {};\n\n      // Validasi form\n      if (!this.user.nama) {\n        this.errors.nama = 'Nama tidak boleh kosong';\n      }\n      if (!this.user.email) {\n        this.errors.email = 'Email tidak boleh kosong';\n      } else if (!this.isValidEmail(this.user.email)) {\n        this.errors.email = 'Format email tidak valid';\n      } else if (await this.isEmailExist(this.user.email)) {\n        this.errors.email = 'Email sudah terdaftar';\n      }\n      if (!this.user.no_telp) {\n        this.errors.no_telp = 'Nomor telepon tidak boleh kosong';\n      }\n\n      // Jika ada error, jangan kirim form\n      if (Object.keys(this.errors).length > 0) {\n        return;\n      }\n\n      // Kirim data ke server atau API\n      axios.post('http://127.0.0.1:5000/tambah-user', this.user).then(response => {\n        // Tampilkan notifikasi sukses\n        this.notification.message = 'Data User berhasil ditambahkan!';\n        this.notification.type = 'success'; // Green notification\n        console.log(response.data);\n\n        // Reset form setelah berhasil\n        this.user = {\n          nama: '',\n          email: '',\n          roles: '',\n          no_telp: ''\n        };\n      }).catch(error => {\n        // Tampilkan notifikasi error\n        this.notification.message = 'Data gagal ditambahkan!';\n        this.notification.type = 'error'; // Red notification\n        console.error(error);\n      });\n    },\n    // Cek format email valid\n    isValidEmail(email) {\n      const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n      return regex.test(email);\n    },\n    // Cek apakah email sudah ada\n    async isEmailExist(email) {\n      try {\n        const response = await axios.get(`http://127.0.0.1:5000/check-email?email=${email}`);\n        return response.data.exists;\n      } catch (error) {\n        console.error('Terjadi kesalahan saat memeriksa email:', error);\n        return false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","user","nama","email","roles","no_telp","notification","message","type","errors","methods","submitForm","isValidEmail","isEmailExist","Object","keys","length","post","then","response","console","log","catch","error","regex","test","get","exists"],"sources":["D:\\SEMESTER 5\\Proyek\\Web_Kost\\frontend\\src\\views\\TambahUser.vue"],"sourcesContent":["<template>\r\n    <div class=\"content\">\r\n      <div class=\"col-md-8\">\r\n        <div class=\"card card-user\">\r\n          <div class=\"card-header\">\r\n            <h5 class=\"card-title\">Tambah User</h5>\r\n          </div>\r\n          <div class=\"card-body\">\r\n            <!-- Notifikasi -->\r\n            <div v-if=\"notification.message\" :class=\"['notification', notification.type]\">\r\n              {{ notification.message }}\r\n            </div>\r\n  \r\n            <form @submit.prevent=\"submitForm\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                  <div class=\"form-group\">\r\n                    <label>Nama</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      placeholder=\"Nama\" \r\n                      v-model=\"user.nama\"\r\n                      :class=\"{'is-invalid': errors.nama}\"\r\n                      required\r\n                    />\r\n                    <div v-if=\"errors.nama\" class=\"invalid-feedback\">{{ errors.nama }}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                  <div class=\"form-group\">\r\n                    <label>Email</label>\r\n                    <input \r\n                      type=\"email\" \r\n                      class=\"form-control\" \r\n                      placeholder=\"Email\" \r\n                      v-model=\"user.email\"\r\n                      :class=\"{'is-invalid': errors.email}\"\r\n                      required\r\n                    />\r\n                    <div v-if=\"errors.email\" class=\"invalid-feedback\">{{ errors.email }}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                  <div class=\"form-group\">\r\n                    <label>Roles</label>\r\n                    <select class=\"form-control\" v-model=\"user.roles\" required>\r\n                      <option value=\"admin\">Admin</option>\r\n                      <option value=\"penyewa\">Penyewa</option>\r\n                      <option value=\"pemilik\">Pemilik</option>\r\n                    </select>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n                  <div class=\"form-group\">\r\n                    <label>Phone</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      placeholder=\"Phone\" \r\n                      v-model=\"user.no_telp\"\r\n                      :class=\"{'is-invalid': errors.no_telp}\"\r\n                      required\r\n                    />\r\n                    <div v-if=\"errors.no_telp\" class=\"invalid-feedback\">{{ errors.no_telp }}</div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"update ml-auto mr-auto\">\r\n                  <button type=\"submit\" class=\"btn btn-update-profile btn-round\">Tambah User</button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios'; // Import axios\r\n  \r\n  export default {\r\n    data() {\r\n      return {\r\n        user: {\r\n          nama: '',\r\n          email: '',\r\n          roles: '',\r\n          no_telp: ''\r\n        },\r\n        notification: {\r\n          message: '',\r\n          type: '' // 'success' or 'error'\r\n        },\r\n        errors: {\r\n          nama: '',\r\n          email: '',\r\n          no_telp: ''\r\n        }\r\n      };\r\n    },\r\n    methods: {\r\n      async submitForm() {\r\n        // Reset errors\r\n        this.errors = {};\r\n  \r\n        // Validasi form\r\n        if (!this.user.nama) {\r\n          this.errors.nama = 'Nama tidak boleh kosong';\r\n        }\r\n        if (!this.user.email) {\r\n          this.errors.email = 'Email tidak boleh kosong';\r\n        } else if (!this.isValidEmail(this.user.email)) {\r\n          this.errors.email = 'Format email tidak valid';\r\n        } else if (await this.isEmailExist(this.user.email)) {\r\n          this.errors.email = 'Email sudah terdaftar';\r\n        }\r\n        if (!this.user.no_telp) {\r\n          this.errors.no_telp = 'Nomor telepon tidak boleh kosong';\r\n        }\r\n  \r\n        // Jika ada error, jangan kirim form\r\n        if (Object.keys(this.errors).length > 0) {\r\n          return;\r\n        }\r\n  \r\n        // Kirim data ke server atau API\r\n        axios.post('http://127.0.0.1:5000/tambah-user', this.user)\r\n          .then(response => {\r\n            // Tampilkan notifikasi sukses\r\n            this.notification.message = 'Data User berhasil ditambahkan!';\r\n            this.notification.type = 'success'; // Green notification\r\n            console.log(response.data);\r\n  \r\n            // Reset form setelah berhasil\r\n            this.user = {\r\n              nama: '',\r\n              email: '',\r\n              roles: '',\r\n              no_telp: ''\r\n            };\r\n          })\r\n          .catch(error => {\r\n            // Tampilkan notifikasi error\r\n            this.notification.message = 'Data gagal ditambahkan!';\r\n            this.notification.type = 'error'; // Red notification\r\n            console.error(error);\r\n          });\r\n      },\r\n  \r\n      // Cek format email valid\r\n      isValidEmail(email) {\r\n        const regex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\r\n        return regex.test(email);\r\n      },\r\n  \r\n      // Cek apakah email sudah ada\r\n      async isEmailExist(email) {\r\n        try {\r\n          const response = await axios.get(`http://127.0.0.1:5000/check-email?email=${email}`);\r\n          return response.data.exists;\r\n        } catch (error) {\r\n          console.error('Terjadi kesalahan saat memeriksa email:', error);\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .btn-update-profile {\r\n    background-color: #75276d; \r\n    color: white; \r\n    border-color: #75276d;\r\n  }\r\n  \r\n  .btn-update-profile:hover {\r\n    background-color: #5e1d57;\r\n    border-color: #5e1d57;\r\n  }\r\n  \r\n  /* CSS untuk notifikasi */\r\n  .notification {\r\n    padding: 10px;\r\n    margin-bottom: 20px;\r\n    border-radius: 5px;\r\n    font-weight: bold;\r\n    text-align: center;\r\n  }\r\n  \r\n  .notification.success {\r\n    background-color: #28a745; /* Green */\r\n    color: white;\r\n  }\r\n  \r\n  .notification.error {\r\n    background-color: #dc3545; /* Red */\r\n    color: white;\r\n  }\r\n  \r\n  /* Styling untuk input yang error */\r\n  .is-invalid {\r\n    border-color: #dc3545;\r\n  }\r\n  \r\n  .invalid-feedback {\r\n    color: #dc3545;\r\n    font-size: 0.875em;\r\n  }\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}